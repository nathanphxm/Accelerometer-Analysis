spectral1 = eigen(S0)
V1 = spectral1$vectors
lambda1 = spectral1$values
diaglambda1 = diag(lambda1)
S1 = V1 %*% diaglambda1 %*% t( V1 )
# now try m=2
diaglambda2 = diag(lambda1^2)
S2 = V1 %*% diaglambda2 %*% t(V1 )
# now try m=-1
Sigmainv=solve(Sigma0)
Sigmainv
## through spectral decomposition
lambda1inv=lambda1^(-1)
lambda1inv
diaglambdainv = diag(lambda1inv)
S3 = V1%*%diaglambdainv%*%t(V1)
S3
Sigma0 = matrix(c(
3.1386518, 0.38872659, 0.6178228, 1.7576847, 0.77433973, 0.7508789,
0.3887266, 1.21417949, 0.1941453, 0.4518920, 0.01236855, 0.2155466,
0.6178228, 0.19414529, 1.2437919, 0.5970320, 0.15151088, 0.2665018,
1.7576847, 0.45189196, 0.5970320, 1.7083497, 0.52685668, 0.7109476,
0.7743397, 0.01236855, 0.1515109, 0.5268567, 0.53406192, 0.2299193,
0.7508789, 0.21554658, 0.2665018, 0.7109476, 0.22991933, 0.6642375),
byrow = TRUE, nrow = 6 )
Sigma0  # view the matrix
Nreps = 200 # number of replications
n = 100 # sample size
results = data.frame() # an object to store the results in
set.seed(19501111) # make the process reproducible to assist with debugging if needed
for(ii in 1:Nreps){
Samp = mvrnorm(n = n, mu = rep(0,6), Sigma = Sigma0 ) # generate sample
pca.XX = prcomp(Samp)
eigvals = pca.XX$sdev^2 # prcomp gives us the standard deviations, so square them
cond = eigvals[1]/eigvals[6]
res.incr = data.frame( replication = ii,   # So we can find problems
eig1 = eigvals[1],  # We are constructing one row of a dataframe
eig2 = eigvals[2],  # at a time so have to do this clunky bit
eig3 = eigvals[3],
eig4 = eigvals[4],
eig5 = eigvals[5],
eig6 = eigvals[6],
cond.number = cond   # The condition number.
)
results = rbind(results, res.incr) # add the new dataframe at the bottom of the old one
}
View(results)
summary(results) # see what we have got
S0 = Sigma0
spectral1 = eigen(S0)
V1 = spectral1$vectors
V1
lambda1 = spectral1$values
diaglambda1 = diag(lambda1)
diaglambda1
# Some graphs to try to understand some relationships.
ggplot(results,aes(eig1)) + geom_density()
ggplot(results,aes(eig6)) + geom_density()
ggplot(results,aes(eig1,eig6)) + geom_point()
ggplot(results,aes(eig1,eig6)) + geom_point() + geom_density_2d()
# Some graphs to try to understand sample and population. Repeat for eig2-eig5
ggplot(results,aes(eig1)) + geom_density()+
geom_vline(xintercept = diaglambda1[1,1], colour = "red" )
ggplot(results,aes(eig6)) + geom_density()+
geom_vline(xintercept = diaglambda1[6,6], colour = "red" )
Paper=read.table("PaperQuality.txt", header=TRUE)
head(Paper)
View(Paper)
str(Paper)
MeanPaper=colMeans(Paper) # mean vector
MeanPaper=matrix(MeanPaper,nrow=3)
cat("Mean Vector of Paper, Density - StrengthMD - StrengthCD",sep="\n")
MeanPaper
cat("Covariance Matrix of Paper Quality",sep="\n")
CovPaper=var(Paper)
print(CovPaper)
cat("Correlation Matrix of Paper Quality",sep="\n")
CorrPaper=cor(Paper)
print(CorrPaper)
pairs(Paper)
library("PerformanceAnalytics")
chart.Correlation(Paper,histogram=TRUE,pch=19)
Paper[25,]
sd(Paper$Density)
sd(Paper$StrengthCD)
## or
sd1=sqrt(CovPaper[1,1])
sd1
sd2=sqrt(CovPaper[3,3])
sd2
Turtle=read.csv("Turtle.csv")
View(Turtle)
head(Turtle)
FemaleTurtle=subset(Turtle,Gender=="female",select=1:3)
#View(FemaleTurtle)
head(FemaleTurtle)
MeanvectorF=colMeans(FemaleTurtle) # mean vector
MeanvectorF=matrix(MeanvectorF,nrow=3)
cat("Mean Vector of Female Turtle, Length-Width-Height",sep="\n")
MeanvectorF
cat("Covariance Matrix of Female Turtle",sep="\n")
CovarF=var(FemaleTurtle)
print(CovarF)
cat("Correlation Matrix of Female Turtle",sep="\n")
CorrF=cor(FemaleTurtle)
print(CorrF)
pairs(FemaleTurtle)
# a more informatic graph
library("PerformanceAnalytics")
chart.Correlation(FemaleTurtle,histogram=TRUE,pch=19)
View(FemaleTurtle)
stars(FemaleTurtle,draw.segment=T,key.loc=c(6,13))
stars(FemaleTurtle,key.loc=c(6,13))
library(DescTools)
PlotFaces(FemaleTurtle)
cat("Covariance Matrix of Female Turtle",sep="\n")
CovarF=var(FemaleTurtle)
print(CovarF)
temp=eigen(CovarF)
lambda1=temp$values[1] ## lambda1
eigenv1=temp$vectors[,1] ## e1
lambda2=temp$values[2] ## lambda2
eigenv2=temp$vectors[,2] ##e2
lambda3=temp$values[3] ## lambda3
eigenv3=temp$vectors[,3] ##e3
## printing the results below
lambda1
lambda2
lambda3
eigenv1
eigenv2
eigenv3
T1=lambda1*(eigenv1)%*%t(eigenv1)
T2=lambda2*(eigenv2)%*%t(eigenv2)
T3=lambda3*(eigenv3)%*%t(eigenv3)
T1+T2+T3
scaled_pca_result3 <- prcomp(sample_covariance, scale = TRUE)
scaled_pc_scores3 <- predict(scaled_pca_result3, newdata = sample_covariance)
scaled_pc_df3 <- data.frame(PC1 = scaled_pc_scores3[, 1], PC2 = scaled_pc_scores3[, 2], PC3 = scaled_pc_scores3[, 3], PC4 = scaled_pc_scores3[, 4], PC5 = scaled_pc_scores3[, 5], PC6 = scaled_pc_scores3[, 6])
ggplot(scaled_pc_df3, aes(x = PC1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC1 Scores (scaled data)", x = "PC1 Score", y = "Density")
ggplot(scaled_pc_df3, aes(x = PC2)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC2 Scores (scaled data)", x = "PC2 Score", y = "Density")
ggplot(scaled_pc_df3, aes(x = PC1, y = PC2)) +
geom_point() +
geom_density_2d() +
labs(title = "Scatterplot of PC1 Scores vs. PC2 Scores (scaled data)",
x = "PC1 Score", y = "PC2 Score")
"headsize" <- +matrix(c(191, 195, 181, 183, 176, 208, 189, 197, 188, 192, 179, 183,
174, 190, 188, 163, 195, 186, 181, 175, 192, 174, +176, 197, 190, 155, 149, 148,
153, 144, 157, 150, 159, 152, 150, 158, 147, 150, 159, 151, 137, 155, 153, +145,
140, 154, 143, 139, 167, 163, 179, 201, 185, 188, 171, 192, 190, 189, 197, 187,
186, 174, 185, 195, +187, 161, 183, 173, 182, 165, 185, 178, 176, 200, 187, 145,
152, 149, 149, 142, 152, 149, 152, 159, 151, +148, 147, 152, 157, 158, 130, 158,
148, 146, 137, 152, 147, 143, 158, 150), nrow = 25, ncol = 4, dimnames = list(character(0),
c("head1", "breadth1", "head2", "breadth2")))
headsize
"headsize" <- +matrix(c(191, 195, 181, 183, 176, 208, 189, 197, 188, 192, 179, 183,
174, 190, 188, 163, 195, 186, 181, 175, 192, 174, +176, 197, 190, 155, 149, 148,
153, 144, 157, 150, 159, 152, 150, 158, 147, 150, 159, 151, 137, 155, 153, +145,
140, 154, 143, 139, 167, 163, 179, 201, 185, 188, 171, 192, 190, 189, 197, 187,
186, 174, 185, 195, +187, 161, 183, 173, 182, 165, 185, 178, 176, 200, 187, 145,
152, 149, 149, 142, 152, 149, 152, 159, 151, +148, 147, 152, 157, 158, 130, 158,
148, 146, 137, 152, 147, 143, 158, 150), nrow = 25, ncol = 4, dimnames = list(character(0),
c("head1", "breadth1", "head2", "breadth2")))
# Calculate sample means
sample_means <- colMeans(headsize)
# Calculate variance-covariance matrix
cov_matrix <- cov(headsize)
# Calculate sample means
sample_means <- colMeans(headsize)
# Calculate variance-covariance matrix
cov_matrix <- cov(headsize)
sample_means
cov_matrix
pca5 = prcomp(cov_matrix)
pca5
total_variance5 <- sum(diag(headsize))
eigen_value5 <- eigen(headsize)$values
total_variance5 <- sum(diag(cov_matrix))
eigen_value5 <- eigen(cov_matrix)$values
prop_var_first_two_PC5 <- sum(eigen_value5[1:2]) / total_variance5
cat("Proportion of total variance explained by the first two PCs:", prop_var_first_two_PC5, "\n")
source("~/Desktop/STAT3064 Statistical Learning/Lab/W3/Lab3_2023_questions.Rmd")
source("~/Desktop/STAT3064 Statistical Learning/Lab/W3/Lab3_2023_questions.Rmd")
loadings(pca5)
eigen_value5
source("~/Desktop/STAT3064 Statistical Learning/Lab/W3/Lab3_2023_questions.Rmd")
pc_scores
knitr::opts_chunk$set(prompt=FALSE, comment=NA, message=FALSE, tidy=TRUE, error=FALSE, eval=TRUE)
library(tidyverse)
library(ggplot2)
library(MASS)
library(GGally)
library(plot3D)
library(mvtnorm)
aircraft = read.csv("aircraft(1).csv")
aircraft = mutate(aircraft,
Period = factor(Period),
logPower = log10(Power),
logSpan = log10(Span),
logLength = log10(Length),
logWeight = log10(Weight),
logSpeed = log10(Speed),
logRange = log10(Range)
) %>%
dplyr::select( Year, Period, starts_with("log") )
pca_result <- prcomp(aircraft[,3:8], scale = FALSE)
eigenvalues <- pca_result$sdev^2
eigenvectors <- pca_result$rotation
print(pca_result)
summary(pca_result)
str(pca_result)
explained_variance <- eigenvalues / sum(eigenvalues)
plot(1:length(explained_variance), explained_variance, type = "b",
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
main = "Scree Plot")
cumulative_variance <- cumsum(explained_variance)
plot(1:length(cumulative_variance), cumulative_variance, type = "b",
xlab = "Principal Component", ylab = "Cumulative Variance Explained",
main = "Cumulative Variance Plot")
pc_scores <- predict(pca_result, newdata = aircraft)
pc_df <- data.frame(PC1 = pc_scores[, 1], PC2 = pc_scores[, 2], Period = aircraft$Period)
ggplot(pc_df, aes(x = PC1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC1 Scores", x = "PC1 Score", y = "Density")
ggplot(pc_df, aes(x = PC2)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC2 Scores", x = "PC2 Score", y = "Density")
ggplot(pc_df, aes(x = PC1, y = PC2, color = Period)) +
geom_point() +
geom_density_2d() +
scale_color_manual(values = c("red", "blue", "green")) +  # Adjust colors as needed
labs(title = "Scatterplot of PC1 Scores vs. PC2 Scores",
x = "PC1 Score", y = "PC2 Score")
biplot(pca_result, col = c("white", "blue"), main = "2D Biplot")
scaled_pca_result <- prcomp(aircraft[,3:8], scale = TRUE)
scaled_eigenvalues <- scaled_pca_result$sdev^2
scaled_eigenvectors <- scaled_pca_result$rotation
print(scaled_pca_result)
summary(scaled_pca_result)
str(scaled_pca_result)
scaled_explained_variance <- scaled_eigenvalues / sum(scaled_eigenvalues)
plot(1:length(scaled_explained_variance), scaled_explained_variance, type = "b",
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
main = "Scree Plot (scaled data)")
scaled_cumulative_variance <- cumsum(scaled_explained_variance)
plot(1:length(scaled_cumulative_variance), scaled_cumulative_variance, type = "b",
xlab = "Principal Component", ylab = "Cumulative Variance Explained",
main = "Cumulative Variance Plot (scaled data)")
scaled_pc_scores <- predict(scaled_pca_result, newdata = aircraft)
scaled_pc_df <- data.frame(PC1 = scaled_pc_scores[, 1], PC2 = scaled_pc_scores[, 2], Period = aircraft$Period)
ggplot(scaled_pc_df, aes(x = PC1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC1 Scores (scaled data)", x = "PC1 Score", y = "Density")
ggplot(scaled_pc_df, aes(x = PC2)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC2 Scores (scaled data)", x = "PC2 Score", y = "Density")
ggplot(scaled_pc_df, aes(x = PC1, y = PC2, color = Period)) +
geom_point() +
geom_density_2d() +
scale_color_manual(values = c("red", "blue", "green")) +  # Adjust colors as needed
labs(title = "Scatterplot of PC1 Scores vs. PC2 Scores (scaled data)",
x = "PC1 Score", y = "PC2 Score")
Sigma0 = matrix(c(
3.1386518, 0.38872659, 0.6178228, 1.7576847, 0.77433973, 0.7508789,
0.3887266, 1.21417949, 0.1941453, 0.4518920, 0.01236855, 0.2155466,
0.6178228, 0.19414529, 1.2437919, 0.5970320, 0.15151088, 0.2665018,
1.7576847, 0.45189196, 0.5970320, 1.7083497, 0.52685668, 0.7109476,
0.7743397, 0.01236855, 0.1515109, 0.5268567, 0.53406192, 0.2299193,
0.7508789, 0.21554658, 0.2665018, 0.7109476, 0.22991933, 0.6642375),
byrow = TRUE, nrow = 6 )
n = 250 # sample size
set.seed(19501111) # make the process reproducible to assist with debugging if needed
Samp = mvrnorm(n = n, mu = rep(0,6), Sigma = Sigma0 )
sample_covariance = cov(Samp)
# Calculate the eigenvalues and eigenvectors of the sample covariance matrix
eigen_result <- eigen(sample_covariance)
# Extract eigenvalues and eigenvectors
eigenvalues <- eigen_result$values
eigenvectors <- eigen_result$vectors
# Print the calculated eigenvalues and eigenvectors
print("Eigenvalues:")
print(eigenvalues)
print("\nEigenvectors:")
print(eigenvectors)
# Create a plot of eigenvalues
plot(1:length(eigenvalues), eigenvalues, type = "b",
xlab = "Index", ylab = "Eigenvalue",
main = "Eigenvalues")
# Calculate the cumulative contribution to total variance
cumulative_variance <- cumsum(eigenvalues) / sum(eigenvalues)
# Create a plot of cumulative contribution to total variance
plot(1:length(cumulative_variance), cumulative_variance, type = "b",
xlab = "Index", ylab = "Cumulative Variance",
main = "Cumulative Variance")
scaled_pca_result3 <- prcomp(sample_covariance, scale = TRUE)
scaled_pc_scores3 <- predict(scaled_pca_result3, newdata = sample_covariance)
scaled_pc_df3 <- data.frame(PC1 = scaled_pc_scores3[, 1], PC2 = scaled_pc_scores3[, 2], PC3 = scaled_pc_scores3[, 3], PC4 = scaled_pc_scores3[, 4], PC5 = scaled_pc_scores3[, 5], PC6 = scaled_pc_scores3[, 6])
ggplot(scaled_pc_df3, aes(x = PC1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC1 Scores (scaled data)", x = "PC1 Score", y = "Density")
ggplot(scaled_pc_df3, aes(x = PC2)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC2 Scores (scaled data)", x = "PC2 Score", y = "Density")
ggplot(scaled_pc_df3, aes(x = PC1, y = PC2)) +
geom_point() +
geom_density_2d() +
labs(title = "Scatterplot of PC1 Scores vs. PC2 Scores (scaled data)",
x = "PC1 Score", y = "PC2 Score")
Sigma4 = matrix(c(
1, -2, 0,
-2, 5, 0,
0, 0, 2),
byrow = TRUE, nrow = 3 )
eigen(Sigma4)
# Print eigenvalues
cat("Eigenvalues:\n")
print(eigen_result$values)
# Print eigenvectors
cat("\nEigenvectors:\n")
print(eigen_result$vectors)
# Variance of Y1
variance_Y1 <- Sigma4[1, 1]
cat("Variance of Y1:", variance_Y1, "\n")
# Covariance between Y1 and Y2
covariance_Y1_Y2 <- Sigma4[1, 2]
cat("Covariance between Y1 and Y2:", covariance_Y1_Y2, "\n")
# Total Variance
total_variance <- sum(diag(Sigma4))
cat("Total Variance in the dataset:", total_variance, "\n")
# Calculate the eigenvalues and eigenvectors of the covariance matrix
eigen_values <- eigen(Sigma4)$values
# Proportion of total variance explained by the first PC
prop_var_first_PC <- eigen_values[1] / total_variance
# Proportion of total variance explained by the first two PCs
prop_var_first_two_PCs <- sum(eigen_values[1:2]) / total_variance
cat("Proportion of total variance explained by the first PC:", prop_var_first_PC, "\n")
cat("Proportion of total variance explained by the first two PCs:", prop_var_first_two_PCs, "\n")
"headsize" <- +matrix(c(191, 195, 181, 183, 176, 208, 189, 197, 188, 192, 179, 183,
174, 190, 188, 163, 195, 186, 181, 175, 192, 174, +176, 197, 190, 155, 149, 148,
153, 144, 157, 150, 159, 152, 150, 158, 147, 150, 159, 151, 137, 155, 153, +145,
140, 154, 143, 139, 167, 163, 179, 201, 185, 188, 171, 192, 190, 189, 197, 187,
186, 174, 185, 195, +187, 161, 183, 173, 182, 165, 185, 178, 176, 200, 187, 145,
152, 149, 149, 142, 152, 149, 152, 159, 151, +148, 147, 152, 157, 158, 130, 158,
148, 146, 137, 152, 147, 143, 158, 150), nrow = 25, ncol = 4, dimnames = list(character(0),
c("head1", "breadth1", "head2", "breadth2")))
# Calculate sample means
sample_means <- colMeans(headsize)
# Calculate variance-covariance matrix
cov_matrix <- cov(headsize)
pca5 = prcomp(cov_matrix)
total_variance5 <- sum(diag(cov_matrix))
eigen_value5 <- eigen(cov_matrix)$values
prop_var_first_two_PC5 <- sum(eigen_value5[1:2]) / total_variance5
cat("Proportion of total variance explained by the first two PCs:", prop_var_first_two_PC5, "\n")
pc_scores
knitr::opts_chunk$set(prompt=FALSE, comment=NA, message=FALSE, tidy=TRUE, error=FALSE, eval=TRUE)
library(tidyverse)
library(ggplot2)
library(MASS)
library(GGally)
library(plot3D)
library(mvtnorm)
aircraft = read.csv("aircraft(1).csv")
aircraft = mutate(aircraft,
Period = factor(Period),
logPower = log10(Power),
logSpan = log10(Span),
logLength = log10(Length),
logWeight = log10(Weight),
logSpeed = log10(Speed),
logRange = log10(Range)
) %>%
dplyr::select( Year, Period, starts_with("log") )
pca_result <- prcomp(aircraft[,3:8], scale = FALSE)
eigenvalues <- pca_result$sdev^2
eigenvectors <- pca_result$rotation
print(pca_result)
summary(pca_result)
str(pca_result)
explained_variance <- eigenvalues / sum(eigenvalues)
plot(1:length(explained_variance), explained_variance, type = "b",
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
main = "Scree Plot")
cumulative_variance <- cumsum(explained_variance)
plot(1:length(cumulative_variance), cumulative_variance, type = "b",
xlab = "Principal Component", ylab = "Cumulative Variance Explained",
main = "Cumulative Variance Plot")
pc_scores <- predict(pca_result, newdata = aircraft)
pc_df <- data.frame(PC1 = pc_scores[, 1], PC2 = pc_scores[, 2], Period = aircraft$Period)
ggplot(pc_df, aes(x = PC1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC1 Scores", x = "PC1 Score", y = "Density")
ggplot(pc_df, aes(x = PC2)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC2 Scores", x = "PC2 Score", y = "Density")
ggplot(pc_df, aes(x = PC1, y = PC2, color = Period)) +
geom_point() +
geom_density_2d() +
scale_color_manual(values = c("red", "blue", "green")) +  # Adjust colors as needed
labs(title = "Scatterplot of PC1 Scores vs. PC2 Scores",
x = "PC1 Score", y = "PC2 Score")
biplot(pca_result, col = c("white", "blue"), main = "2D Biplot")
pca_result
pc_df
aircraft$Period
scaled_pca_result <- prcomp(aircraft[,3:8], scale = TRUE)
scaled_eigenvalues <- scaled_pca_result$sdev^2
scaled_eigenvectors <- scaled_pca_result$rotation
print(scaled_pca_result)
summary(scaled_pca_result)
str(scaled_pca_result)
scaled_explained_variance <- scaled_eigenvalues / sum(scaled_eigenvalues)
plot(1:length(scaled_explained_variance), scaled_explained_variance, type = "b",
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
main = "Scree Plot (scaled data)")
scaled_cumulative_variance <- cumsum(scaled_explained_variance)
plot(1:length(scaled_cumulative_variance), scaled_cumulative_variance, type = "b",
xlab = "Principal Component", ylab = "Cumulative Variance Explained",
main = "Cumulative Variance Plot (scaled data)")
scaled_pc_scores <- predict(scaled_pca_result, newdata = aircraft)
scaled_pc_df <- data.frame(PC1 = scaled_pc_scores[, 1], PC2 = scaled_pc_scores[, 2], Period = aircraft$Period)
ggplot(scaled_pc_df, aes(x = PC1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC1 Scores (scaled data)", x = "PC1 Score", y = "Density")
ggplot(scaled_pc_df, aes(x = PC2)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Smoothed Histogram of PC2 Scores (scaled data)", x = "PC2 Score", y = "Density")
ggplot(scaled_pc_df, aes(x = PC1, y = PC2, color = Period)) +
geom_point() +
geom_density_2d() +
scale_color_manual(values = c("red", "blue", "green")) +  # Adjust colors as needed
labs(title = "Scatterplot of PC1 Scores vs. PC2 Scores (scaled data)",
x = "PC1 Score", y = "PC2 Score")
biplot(scaled_pca_result, col = c("white", "blue"), main = "2D Biplot")
source("~/Desktop/STAT3064 Statistical Learning/Lab/W3/Lab3_2023_questions.Rmd")
file007 = read.table("file007.txt")
setwd("/Users/yvette/Desktop/CITS3200 Professional Computing/Project/Resources")
file007 = read.table("file007.txt")
View(file007)
file007 = read.table("file007.txt",sep = ",")
file007 = read.table("file007.txt",sep = ",",header = FALSE)
# Set the file path
file_path <- "file007.txt"  # Replace with the actual path to your file
# Initialize variables to store data
all_data <- list()
current_block <- NULL
# Read the file line by line
lines <- readLines(file_path)
for (line in lines) {
if (startsWith(line, "*")) {
# If a new block starts, store the previous block if it exists
if (!is.null(current_block)) {
all_data <- c(all_data, list(current_block))
}
current_block <- list()
} else {
# If it's not a block start, parse the line and add it to the current block
values <- as.numeric(strsplit(line, ",")[[1]])
current_block <- c(current_block, list(values))
}
}
# Store the last block
if (!is.null(current_block)) {
all_data <- c(all_data, list(current_block))
}
# Print the collected data
print(all_data)
# Print the extracted timestamps
print(timestamps)
Set the file path
# Set the file path
file_path <- "file007.txt"  # Replace with the actual path to your file
# Initialize a vector to store timestamps
timestamps <- numeric()
# Read the file line by line
lines <- readLines(file_path)
for (line in lines) {
if (startsWith(line, "*")) {
# Extract the timestamp after the asterisk
timestamp <- as.numeric(sub("^\\*(\\d+).*", "\\1", line))
timestamps <- c(timestamps, timestamp)
}
}
# Print the extracted timestamps
print(timestamps)
# Calculate the differences between consecutive timestamps
timestamp_diffs <- diff(timestamps)
# Create a plot
plot(1:(length(timestamp_diffs) + 1), timestamp_diffs, type = "o",
xlab = "Timestamp Index", ylab = "Timestamp Difference",
# Create a plot
plot(1:(length(timestamp_diffs) + 1), timestamp_diffs, type = "o",
xlab = "Timestamp Index", ylab = "Timestamp Difference",
main = "Consistency of Timestamp Intervals")
# Create a plot
plot(1:(length(timestamp_diffs) + 1), timestamp_diffs, type = "o",
# Create a plot
plot(1:(length(timestamp_diffs) + 1), timestamp_diffs, type = "o",
xlab = "Timestamp Index", ylab = "Timestamp Difference",
main = "Consistency of Timestamp Intervals")
# Create a plot
plot(1:(length(timestamp_diffs)), timestamp_diffs, type = "o",
xlab = "Timestamp Index", ylab = "Timestamp Difference",
main = "Consistency of Timestamp Intervals")
# Create a plot
plot(1:(length(timestamp_diffs)+1), timestamps, type = "o",
xlab = "Timestamp Index", ylab = "Timestamp",
main = "Consistency of Timestamp Intervals")
